{"version":3,"sources":["components/DisplayComponent.js","components/CountryComponent.js","App.js","serviceWorker.js","index.js"],"names":["DisplayData","props","worldData","active","state","data","confirmed","value","deaths","recovered","Grid","container","item","xs","sm","md","align","lastUpdate","spacing","Box","bgcolor","color","borderRadius","p","loading","fetch","response","json","this","setState","Container","fixed","Component","CountryData","countryData","className","Date","updated","toLocaleString","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","country","key","scope","cases","countries","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be1327b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nclass DisplayData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            data: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://covid19.mathdro.id/api');\r\n        const data = await response.json();\r\n        this.setState({ data: data, loading: false })\r\n    }\r\n\r\n    worldData = () => {\r\n        const active = this.state.data.confirmed.value - this.state.data.deaths.value - this.state.data.recovered.value\r\n        return (\r\n            <div >\r\n                <Grid container >\r\n                    <Grid item xs={12} sm={6} md={8}>\r\n                        <h1 align=\"left\">WORLD</h1>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <h4 align=\"right col-4\">LastUpdate : {this.state.data.lastUpdate}</h4>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <Box align=\"center\" bgcolor=\"primary.main\" color=\"primary.contrastText\" borderRadius=\"10%\" p={2}>\r\n                            <h2><strong>Confirmed</strong></h2>\r\n                            <h4>{this.state.data.confirmed.value}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <Box align=\"center\" bgcolor=\"warning.main\" color=\"warning.contrastText\" borderRadius=\"10%\" p={2}>\r\n                            <h2><strong>Active</strong></h2>\r\n                            <h4>{active}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <Box align=\"center\" bgcolor=\"success.main\" color=\"success.contrastText\" borderRadius=\"10%\" p={2}>\r\n                            <h2><strong>Recovered</strong></h2>\r\n                            <h4>{this.state.data.recovered.value}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={3}>\r\n                        <Box align=\"center\" bgcolor=\"error.main\" color=\"error.contrastText\" borderRadius=\"10%\" p={2}>\r\n                            <h2><strong>Decreased</strong></h2>\r\n                            <h4>{this.state.data.deaths.value}</h4>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n\r\n    // countryData = () => {\r\n    //     const active = this.state.indiaData.confirmed.value - this.state.indiaData.deaths.value - this.state.indiaData.recovered.value\r\n    //     return (\r\n    //         <div>\r\n    //             <Grid container >\r\n    //                 <Grid item xs={12} sm={6} md={4}>\r\n    //                     <h1 align=\"center\">INDIA</h1>\r\n    //                 </Grid>\r\n    //                 <Grid item xs={12} sm={6} md={8}>\r\n    //                     <h1 align=\"right col-4\">LastUpdate : {this.state.indiaData.lastUpdate}</h1>\r\n    //                 </Grid>\r\n    //             </Grid>\r\n\r\n    //             <Grid container spacing={2}>\r\n    //                 <Grid item xs={12} sm={6} md={3}>\r\n    //                     <Box align=\"center\" bgcolor=\"primary.main\" color=\"primary.contrastText\" p={2}>\r\n    //                         <h2><strong>Confirmed</strong></h2>\r\n    //                         <h4>{this.state.indiaData.confirmed.value}</h4>\r\n    //                     </Box>\r\n    //                 </Grid>\r\n    //                 <Grid item xs={12} sm={6} md={3}>\r\n    //                     <Box align=\"center\" bgcolor=\"warning.main\" color=\"warning.contrastText\" p={2}>\r\n    //                         <h2><strong>Active</strong></h2>\r\n    //                         <h4>{active}</h4>\r\n    //                     </Box>\r\n    //                 </Grid>\r\n    //                 <Grid item xs={12} sm={6} md={3}>\r\n    //                     <Box align=\"center\" bgcolor=\"success.main\" color=\"success.contrastText\" p={2}>\r\n    //                         <h2><strong>Recovered</strong></h2>\r\n    //                         <h4>{this.state.indiaData.recovered.value}</h4>\r\n    //                     </Box>\r\n    //                 </Grid>\r\n    //                 <Grid item xs={12} sm={6} md={3}>\r\n    //                     <Box align=\"center\" bgcolor=\"error.main\" color=\"error.contrastText\" p={2}>\r\n    //                         <h2><strong>Decreased</strong></h2>\r\n    //                         <h4>{this.state.indiaData.deaths.value}</h4>\r\n    //                     </Box>\r\n    //                 </Grid>\r\n    //             </Grid>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.loading ? <div><p>Loading...</p></div> : <Container fixed>\r\n                    {this.worldData()}\r\n                </Container>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default DisplayData;","import React, { Component } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nclass CountryData extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: true,\r\n            CountryData: null,\r\n            updated: null\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const response = await fetch('https://corona.lmao.ninja/countries');\r\n        const countries = await response.json();\r\n        this.setState({ CountryData: countries, updated: countries[0].updated, loading: false })\r\n    }\r\n\r\n\r\n    countryData = () => {\r\n        // const active = this.state.indiaData.confirmed.value - this.state.indiaData.deaths.value - this.state.indiaData.recovered.value\r\n        return (\r\n            <div className=\"container\">\r\n                <h3 align=\"right\">\r\n                    {new Date(this.state.updated).toLocaleString()}\r\n                </h3>\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead bgcolor=\"palette.common.black\" color=\"primary.contrastText\">\r\n                            <TableRow>\r\n                                <TableCell><strong>Country Name</strong></TableCell>\r\n                                <TableCell align=\"right\"><strong>Confirmed</strong></TableCell>\r\n                                <TableCell align=\"right\"><strong>Active</strong></TableCell>\r\n                                <TableCell align=\"right\"><strong>Recovered</strong></TableCell>\r\n                                <TableCell align=\"right\"><strong>Decreased</strong></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.CountryData.map((country) => {\r\n                                return (\r\n                                    <TableRow key={country.country} >\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {country.country}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{country.cases}</TableCell>\r\n                                        <TableCell align=\"right\">{country.active}</TableCell>\r\n                                        <TableCell align=\"right\">{country.recovered}</TableCell>\r\n                                        <TableCell align=\"right\">{country.deaths}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.loading ? <div><p>Loading...</p></div> : <Container fixed>\r\n                    {this.countryData()}\r\n                </Container>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default CountryData;\r\n","import React from 'react';\nimport DisplayData from './components/DisplayComponent';\nimport CountryData from './components/CountryComponent'\n\n\nfunction App() {\n  return (\n    <div>\n      <h1 align=\"center\">This is Data from JHU</h1>\n      <DisplayData />\n      <CountryData />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}